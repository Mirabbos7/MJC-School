plugins {
    id 'java'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
    id 'war'
}

wrapper {
    gradleVersion = gradlewVersion
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    group = 'com.mjc.school'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
        testImplementation("org.mockito:mockito-core:5.18.0")
        testImplementation("org.mockito:mockito-junit-jupiter:5.18.0")
        testImplementation 'org.assertj:assertj-core:3.26.0'
        // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
        implementation("org.mapstruct:mapstruct:1.6.3")
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
            html.required = true
        }
    }
}

task repack(type: Jar, dependsOn: ':module-main:build') {
    if (findProject(':module-main') != null) {
        entryCompression = ZipEntryCompression.STORED
        def buildJar = zipTree("${project(':module-main').buildDir}/libs/module-main-all.jar")
        from(buildJar) { into('/') }
        manifest {
            attributes(
                    'Main-Class': 'com.mjc.school.Main'
            )
        }
    }
}
